name: Create and publish a Docker image

on:
  pull_request_target:
    types:
      - closed
    branches:
      - main

env:
  REGISTRY: ghcr.io
  REPO_NAME: ${{ github.repository }}

jobs:
  cache-deps:
    name: Pull request merge - Validate npm cache for main branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout [main]
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Use the node_modules cache if available [npm]
        id: use-npm-cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-16-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        if: steps.use-npm-cache.outputs.cache-hit != 'true'
        run: npm ci

  build:
    name: Pull request merge - Build
    needs: cache-deps
    uses: nrwl/ci/.github/workflows/nx-cloud-main.yml@v0.11.2
    secrets:
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
      NX_CLOUD_AUTH_TOKEN: ${{ secrets.NX_CLOUD_AUTH_TOKEN }}
    with:
      runs-on: ubuntu-latest
      number-of-agents: 3
      parallel-commands-on-agents: |
        npx nx daemon && npx nx run-many --target=build --projects=api,upd,db-updater,db-cli --parallel=3 --prod
      install-commands: npm install
      artifacts-name: nx-dist
      artifacts-path: dist/

  agents:
    name: Nx Cloud - Agents
    uses: nrwl/ci/.github/workflows/nx-cloud-agents.yml@v0.11.2
    secrets:
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
      NX_CLOUD_AUTH_TOKEN: ${{ secrets.NX_CLOUD_AUTH_TOKEN }}
    with:
      runs-on: ubuntu-latest
      number-of-agents: 3
      install-commands: npm install

  build-and-push-image:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: nx-dist
          path: dist/

      - name: Build and push Docker image (web)
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: docker/performance_base/Dockerfile
          target: web_ci
          push: true
          tags: ghcr.io/${{ env.REPO_NAME }}/web:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Docker image (nginx)
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: docker/performance_base/Dockerfile
          target: nginx_ci
          push: true
          tags: ghcr.io/${{ env.REPO_NAME }}/nginx:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Docker image (db-updater)
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: docker/performance_base/Dockerfile
          target: db-updater_ci
          push: true
          tags: ghcr.io/${{ env.REPO_NAME }}/db-updater:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
